%implements s25_b0_dssko_Functions "C"

%function simple_controll_quatMultiply_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
q3[0] = ((q1[0] * q2[0] - q1[1] * q2[1]) - q1[2] * q2[2]) - q1[3] * q2[3];
q3[1] = (q1[0] * q2[1] + q2[0] * q1[1]) + (q1[2] * q2[3] - q1[3] * q2[2]);
q3[2] = (q1[0] * q2[2] + q2[0] * q1[2]) + (q1[3] * q2[1] - q1[1] * q2[3]);
q3[3] = (q1[0] * q2[3] + q2[0] * q1[3]) + (q1[1] * q2[2] - q1[2] * q2[1]);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void simple_controll_quatMultiply(\
%assign comma = ""
%<comma>const real_T q1[4]\
%assign comma = ", "
%<comma>const real_T q2[4]\
%assign comma = ", "
%<comma>real_T q3[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 0, fcnProtoType)>
%return fcnBuff
%endfunction

%function simple_controll_quatMultiply_a_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
q3[0] = ((q1[0] * q2[0] - q1[1] * q2[1]) - q1[2] * q2[2]) - q1[3] * q2[3];
q3[1] = (q1[0] * q2[1] + q2[0] * q1[1]) + (q1[2] * q2[3] - q1[3] * q2[2]);
q3[2] = (q1[0] * q2[2] + q2[0] * q1[2]) + (q1[3] * q2[1] - q1[1] * q2[3]);
q3[3] = (q1[0] * q2[3] + q2[0] * q1[3]) + (q1[1] * q2[2] - q1[2] * q2[1]);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void simple_controll_quatMultiply_a(\
%assign comma = ""
%<comma>const real_T q1[4]\
%assign comma = ", "
%<comma>const real_T q2[4]\
%assign comma = ", "
%<comma>real_T q3[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 1, fcnProtoType)>
%return fcnBuff
%endfunction

%function simple_controll_mpower_Fcn2(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T x[9];
int32_T p1;
int32_T p2;
int32_T p3;
real_T absx11;
real_T absx21;
real_T absx31;
int32_T itmp;
memcpy(&x[0], &a[0], 9U * sizeof(real_T));
p1 = 0;
p2 = 3;
p3 = 6;
absx11 = fabs(a[0]);
absx21 = fabs(a[1]);
absx31 = fabs(a[2]);
if ((absx21 > absx11) && (absx21 > absx31)) {
    p1 = 3;
    p2 = 0;
    x[0] = a[1];
    x[1] = a[0];
    x[3] = a[4];
    x[4] = a[3];
    x[6] = a[7];
    x[7] = a[6];
} else {
    if (absx31 > absx11) {
        p1 = 6;
        p3 = 0;
        x[0] = a[2];
        x[2] = a[0];
        x[3] = a[5];
        x[5] = a[3];
        x[6] = a[8];
        x[8] = a[6];
    }
}
absx11 = x[1] / x[0];
x[1] /= x[0];
absx21 = x[2] / x[0];
x[2] /= x[0];
x[4] -= absx11 * x[3];
x[5] -= absx21 * x[3];
x[7] -= absx11 * x[6];
x[8] -= absx21 * x[6];
if (fabs(x[5]) > fabs(x[4])) {
    itmp = p2;
    p2 = p3;
    p3 = itmp;
    x[1] = absx21;
    x[2] = absx11;
    absx11 = x[4];
    x[4] = x[5];
    x[5] = absx11;
    absx11 = x[7];
    x[7] = x[8];
    x[8] = absx11;
}
absx11 = x[5] / x[4];
x[5] /= x[4];
x[8] -= absx11 * x[7];
absx11 = (x[5] * x[1] - x[2]) / x[8];
absx21 = -(x[7] * absx11 + x[1]) / x[4];
c[p1] = ((1.0 - x[3] * absx21) - x[6] * absx11) / x[0];
c[p1 + 1] = absx21;
c[p1 + 2] = absx11;
absx11 = -x[5] / x[8];
absx21 = (1.0 - x[7] * absx11) / x[4];
c[p2] = -(x[3] * absx21 + x[6] * absx11) / x[0];
c[p2 + 1] = absx21;
c[p2 + 2] = absx11;
absx11 = 1.0 / x[8];
absx21 = -x[7] * absx11 / x[4];
c[p3] = -(x[3] * absx21 + x[6] * absx11) / x[0];
c[p3 + 1] = absx21;
c[p3 + 2] = absx11;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void simple_controll_mpower(\
%assign comma = ""
%<comma>const real_T a[9]\
%assign comma = ", "
%<comma>real_T c[9]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 2, fcnProtoType)>
%return fcnBuff
%endfunction

%function simple_controll_quatMultiply_o_Fcn3(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
q3[0] = ((q1[0] * q2[0] - q1[1] * q2[1]) - q1[2] * q2[2]) - q1[3] * q2[3];
q3[1] = (q1[0] * q2[1] + q2[0] * q1[1]) + (q1[2] * q2[3] - q1[3] * q2[2]);
q3[2] = (q1[0] * q2[2] + q2[0] * q1[2]) + (q1[3] * q2[1] - q1[1] * q2[3]);
q3[3] = (q1[0] * q2[3] + q2[0] * q1[3]) + (q1[1] * q2[2] - q1[2] * q2[1]);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void simple_controll_quatMultiply_o(\
%assign comma = ""
%<comma>const real_T q1[4]\
%assign comma = ", "
%<comma>const real_T q2[4]\
%assign comma = ", "
%<comma>real_T q3[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 3, fcnProtoType)>
%return fcnBuff
%endfunction

%function simple_controll_quatMultiply_e_Fcn4(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
q3[0] = ((q1[0] * q2[0] - q1[1] * q2[1]) - q1[2] * q2[2]) - q1[3] * q2[3];
q3[1] = (q1[0] * q2[1] + q2[0] * q1[1]) + (q1[2] * q2[3] - q1[3] * q2[2]);
q3[2] = (q1[0] * q2[2] + q2[0] * q1[2]) + (q1[3] * q2[1] - q1[1] * q2[3]);
q3[3] = (q1[0] * q2[3] + q2[0] * q1[3]) + (q1[1] * q2[2] - q1[2] * q2[1]);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void simple_controll_quatMultiply_e(\
%assign comma = ""
%<comma>const real_T q1[4]\
%assign comma = ", "
%<comma>const real_T q2[4]\
%assign comma = ", "
%<comma>real_T q3[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 4, fcnProtoType)>
%return fcnBuff
%endfunction

