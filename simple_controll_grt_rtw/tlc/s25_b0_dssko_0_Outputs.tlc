%implements s25_b0_dssko_0_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T n;
real_T scale;
real_T absxk;
real_T t;
%closefile localVarDecl
/* MATLAB Function 'control/ExtendedMellingerControl/regulator/e_rdot': '<S23>:1' */
/* '<S23>:1:2' */
/* '<S23>:1:3' */
scale = 2.2250738585072014E-308;
localB->e[0] = rtu_d[0] - rtu_r[0];
absxk = fabs(localB->e[0]);
if (absxk > 2.2250738585072014E-308) {
    n = 1.0;
    scale = absxk;
} else {
    t = absxk / 2.2250738585072014E-308;
    n = t * t;
}
localB->e[1] = rtu_d[1] - rtu_r[1];
absxk = fabs(localB->e[1]);
if (absxk > scale) {
    t = scale / absxk;
    n = n * t * t + 1.0;
    scale = absxk;
} else {
    t = absxk / scale;
    n += t * t;
}
localB->e[2] = rtu_d[2] - rtu_r[2];
absxk = fabs(localB->e[2]);
if (absxk > scale) {
    t = scale / absxk;
    n = n * t * t + 1.0;
    scale = absxk;
} else {
    t = absxk / scale;
    n += t * t;
}
n = scale * sqrt(n);
if (!(n < rtu_lim)) {
    /* '<S23>:1:7' */
    localB->e[0] = rtu_lim * localB->e[0] / n;
    localB->e[1] = rtu_lim * localB->e[1] / n;
    localB->e[2] = rtu_lim * localB->e[2] / n;
} else {
    /* '<S23>:1:4' */
}
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(0, 0, 0)>
%endif
%if SLibCG_ArgAccessed(0, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface))
%<SLibCG_UndoAccessArg(0, 0, 0)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void simple_controll_e_rdot(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 0, 0)
%<comma>%<tSimStructType> * const %<tSimStruct>\
%assign comma = ", "
%endif
%<comma>const real_T rtu_r[3]\
%assign comma = ", "
%<comma>const real_T rtu_d[3]\
%assign comma = ", "
%<comma>real_T rtu_lim\
%assign comma = ", "
%<comma>B_e_rdot_simple_controll_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
