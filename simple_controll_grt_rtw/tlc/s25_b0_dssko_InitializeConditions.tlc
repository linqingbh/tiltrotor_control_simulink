%implements s25_b0_dssko_InitializeConditions "C"

%function InitializeConditions(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%<SLibInsertAsyncTaskInitializeCode(system)>
%<SLibWriteMachineInitialize()>
/* InitializeConditions for Integrator: '<S77>/qBI' */
simple_controll_X.qBI_CSTATE[0] = simple_controll_P.qc.qBI0[0];
simple_controll_X.qBI_CSTATE[1] = simple_controll_P.qc.qBI0[1];
simple_controll_X.qBI_CSTATE[2] = simple_controll_P.qc.qBI0[2];
simple_controll_X.qBI_CSTATE[3] = simple_controll_P.qc.qBI0[3];
/* InitializeConditions for Derivative: '<S14>/Derivative3' */
simple_controll_DW.TimeStampA = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
simple_controll_DW.TimeStampB = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
/* InitializeConditions for Derivative: '<S14>/Derivative4' */
simple_controll_DW.TimeStampA_p = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
simple_controll_DW.TimeStampB_f = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
/* InitializeConditions for Derivative: '<S14>/Derivative5' */
simple_controll_DW.TimeStampA_g = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
simple_controll_DW.TimeStampB_p = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
/* InitializeConditions for SecondOrderIntegrator: '<S77>/r' */
simple_controll_X.r_CSTATE[0] = simple_controll_P.qc.r0[0];
simple_controll_X.r_CSTATE[3] = simple_controll_P.qc.v0[0];
simple_controll_DW.r_MODE[0] = 0;
/* InitializeConditions for Integrator: '<S77>/omegaB_int' */
simple_controll_X.omegaB_int_CSTATE[0] = simple_controll_P.qc.omegaB0[0];
/* InitializeConditions for SecondOrderIntegrator: '<S77>/r' */
simple_controll_X.r_CSTATE[1] = simple_controll_P.qc.r0[1];
simple_controll_X.r_CSTATE[4] = simple_controll_P.qc.v0[1];
simple_controll_DW.r_MODE[1] = 0;
/* InitializeConditions for Integrator: '<S77>/omegaB_int' */
simple_controll_X.omegaB_int_CSTATE[1] = simple_controll_P.qc.omegaB0[1];
/* InitializeConditions for SecondOrderIntegrator: '<S77>/r' */
simple_controll_X.r_CSTATE[2] = simple_controll_P.qc.r0[2];
simple_controll_X.r_CSTATE[5] = simple_controll_P.qc.v0[2];
simple_controll_DW.r_MODE[2] = 0;
/* InitializeConditions for Integrator: '<S77>/omegaB_int' */
simple_controll_X.omegaB_int_CSTATE[2] = simple_controll_P.qc.omegaB0[2];
/* InitializeConditions for Derivative: '<S14>/Derivative2' */
simple_controll_DW.TimeStampA_o = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
simple_controll_DW.TimeStampB_a = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
/* InitializeConditions for Derivative: '<S14>/Derivative1' */
simple_controll_DW.TimeStampA_d = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
simple_controll_DW.TimeStampB_b = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
/* InitializeConditions for Derivative: '<S76>/Derivative' */
simple_controll_DW.TimeStampA_h = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
simple_controll_DW.TimeStampB_o = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
/* InitializeConditions for Derivative: '<S76>/Derivative1' */
simple_controll_DW.TimeStampA_c = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
simple_controll_DW.TimeStampB_c = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
/* InitializeConditions for Derivative: '<S76>/Derivative2' */
simple_controll_DW.TimeStampA_j = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
simple_controll_DW.TimeStampB_m = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
%<SLibInsertInitPeriodicCStatesFcn(system)>
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void InitializeConditions(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 6, fcnProtoType)>
%endfunction
